public class LinkedList{
  Node head;
  
  // classe para insercao de elementos no final da lista ligada
  public void insert(int data){
    Node node = new Node(data);
    if(head==null){
      head = node;
      return;
    }
    
    Node n = head;
    while(n.next != null){
      n = n.next;
    }
    head = n;
  }
  
  public void insertAtStart(int data){
    Node node = new Node(data);
    node.next = head;
    head = node;
  }
  
  // se o indice for maior que a quantidade de posicoes dado sera inserido no final
  public void insertAt(int index, int data){
    if(index == 0){
      insertAtStart(data);
      return
    }
    
    Node node = new node(data); // node que sera inserido
    Node n = head; // node temporario para percorrer a lista
    //pega o elemento ao anterior ao indice ou o ultimo possivel da lista
    for(int i = 0; (i < index-1) && (n.next != null); i++){
      n = n.next;
    }
    node.next = n.next;
    n.next = node;
    
  }
  
  public void deleteAt(int index){
    if(head == null){
      return
    }
    
    if(index == 0){
      head = head.next;
      return;
    }
    // trataremos agora os casos em que nao adicionaremos no comeÃ§o
    
    Node prev = head; // armazena a posicao anterior do node analisado
    Node n = head.next; // node temporario para percorrer a lista
    
    for(int i = 0; (i < index-1) && (n.next != null); i++){
      n = n.next
      prev = prev.next;
    }
    
    if(n.next == null){
      prev.next = null; // cheguei no final da lista, deletar a ultima posicao
    }else{
      n.next == n.next.next; // nao cheguei no final da lista, apontar a posicao atual para o proximo do proximo
    }
  }
  
  public void show(){
    Node n = head;
    while(n != null){
      System.out.printf("%2d%s", n.data, n.next==null? "\n", " ");
    }
  
  }


}
